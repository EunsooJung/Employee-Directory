{"version":3,"sources":["utils/GridDataContext.js","components/GridDataBody.js","components/GridDataTable.js","components/SearchByName.js","components/Navigation.js","utils/RandomuserAPI.js","components/GridData.js","components/Landing.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataAreaContext","React","createContext","GridDataBody","context","useContext","GridDataContext","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArr","split","year","join","dateFormat","DataTable","id","headings","width","style","onClick","handleSort","SearchByName","type","placeholder","aria-label","onChange","e","handleSearchChange","Navigation","data-toggle","data-target","aria-controls","aria-expanded","axios","get","GridData","useState","users","order","setDeveloperState","useEffect","RandomUserAPI","then","results","console","log","data","Provider","value","event","filter","filteredList","item","values","toLowerCase","indexOf","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","age","updatedHeadings","length","Landing","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oWAYeA,G,MAFSC,IAAMC,cAAc,KC+C7BC,EArDM,WACnB,IAAMC,EAAUC,qBAAWC,GAY3B,OACE,oCAC+CC,IAA5CH,EAAQI,eAAeC,cAAc,SACWF,IAAjDH,EAAQI,eAAeC,cAAc,GAAGC,KACtCN,EAAQI,eAAeC,cAAcE,KACnC,YAAkD,IAA/CC,EAA8C,EAA9CA,MAAOF,EAAuC,EAAvCA,KAAMG,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACE,wBAAIC,IAAKL,EAAMM,MACb,wBAAIC,UAAQ,QAAQC,UAAU,gBAC5B,yBACEC,IAAKR,EAAQS,OACbC,IAAK,qBAAuBb,EAAKc,MAAQ,IAAMd,EAAKe,KACpDL,UAAU,oBAGd,wBAAID,UAAQ,OAAOC,UAAU,0BAC1BV,EAAKc,MADR,IACgBd,EAAKe,MAErB,wBAAIN,UAAQ,QAAQC,UAAU,gBAC3BN,GAEH,wBAAIK,UAAQ,QAAQC,UAAU,gBAC5B,uBAAGM,KAAM,UAAYX,EAAOY,OAAO,WAChCZ,IAGL,wBAAII,UAAQ,MAAMC,UAAU,gBApC1C,SAAoBQ,GAClB,IAAMC,EAAUD,EAAKE,MAAM,KACrBC,EAAOF,EAAQ,GAKrB,MADsB,CAHRA,EAAQ,GACPA,EAAQ,GAAGC,MAAM,KACb,GACgBC,GAAMC,KAAK,KA+B/BC,CAAWjB,EAAIY,WAO1B,uCCVOM,G,MApCG,WAChB,IAAM9B,EAAUC,qBAAWL,GAE3B,OACE,yBAAKoB,UAAU,kBACb,2BACEe,GAAG,QACHf,UAAU,mDAEV,+BACE,4BACGhB,EAAQI,eAAe4B,SAASzB,KAAI,YAAsB,IAAnBD,EAAkB,EAAlBA,KAAM2B,EAAY,EAAZA,MAC5C,OACE,wBACEjB,UAAU,MACVH,IAAKP,EACL4B,MAAO,CAAED,SACTE,QAAS,WAEPnC,EAAQoC,WAAW9B,KAGpBA,EACD,0BAAMU,UAAU,kBAO1B,kBAAC,EAAD,UCTOqB,G,MAvBM,WACnB,IAAMrC,EAAUC,qBAAWC,GAE3B,OACE,yBAAKc,UAAU,aACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBe,GAAG,IAAtC,WAIF,2BACEf,UAAU,uBACVsB,KAAK,SACLC,YAAY,OACZC,aAAW,SACXC,SAAU,SAAAC,GAAC,OAAI1C,EAAQ2C,mBAAmBD,UCQrCE,MAvBf,WACE,OACE,yBAAK5B,UAAU,iDACb,4BACEA,UAAU,iBACVsB,KAAK,SACLO,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdR,aAAW,qBAEX,0BAAMxB,UAAU,yBAElB,yBAAKA,UAAU,+BAA+Be,GAAG,aAC/C,yBAAKf,UAAU,qBACb,kBAAC,EAAD,U,iBCZK,EAEH,WACR,OAAOiC,IAAMC,IAAI,iDC8GNC,EAnHE,WAAO,IAAD,EACuBC,mBAAS,CACnDC,MAAO,GACPC,MAAO,UACPjD,cAAe,GACf2B,SAAU,CACR,CAAE1B,KAAM,QAAS2B,MAAO,MAAOqB,MAAO,WACtC,CAAEhD,KAAM,OAAQ2B,MAAO,MAAOqB,MAAO,WACrC,CAAEhD,KAAM,QAAS2B,MAAO,MAAOqB,MAAO,WACtC,CAAEhD,KAAM,QAAS2B,MAAO,MAAOqB,MAAO,WACtC,CAAEhD,KAAM,MAAO2B,MAAO,MAAOqB,MAAO,cAVnB,mBACdlD,EADc,KACEmD,EADF,KAmGrB,OAXAC,qBAAU,WACRC,IAAyBC,MAAK,SAAAC,GAC5BC,QAAQC,IAAIF,EAAQG,KAAKH,SACzBJ,EAAkB,eACbnD,EADY,CAEfiD,MAAOM,EAAQG,KAAKH,QACpBtD,cAAesD,EAAQG,KAAKH,gBAG/B,IAGD,kBAACzD,EAAgB6D,SAAjB,CACEC,MAAO,CAAE5D,iBAAgBuC,mBA5BF,SAAAsB,GACzB,IAAMC,EAASD,EAAM1C,OAAOyC,MACtBG,EAAe/D,EAAeiD,MAAMa,QAAO,SAAAE,GAC/C,IAAIC,EACFD,EAAK9D,KAAKc,MAAMkD,cAAgB,IAAMF,EAAK9D,KAAKe,KAAKiD,cAEvD,GADAV,QAAQC,IAAIK,EAAQG,IAC0B,IAA1CA,EAAOE,QAAQL,EAAOI,eACxB,OAAOF,KAIXb,EAAkB,eAAKnD,EAAN,CAAsBC,cAAe8D,MAiBP/B,WAvF9B,SAAAoC,GACjB,IAAIC,EAAerE,EAAe4B,SAC/BkC,QAAO,SAAAQ,GAAI,OAAIA,EAAKpE,OAASkE,KAC7BjE,KAAI,SAAAmE,GAAI,OAAIA,EAAKpB,SACjBqB,WAGDF,EADmB,YAAjBA,EACa,SAEA,UAGjB,IAkCMG,EAAcxE,EAAeC,cAAcwE,MAlC9B,SAACC,EAAGC,GACrB,MAAqB,WAAjBN,OAEiBtE,IAAf2E,EAAEN,GACG,OACiBrE,IAAf4E,EAAEP,IACH,EAGW,SAAZA,EACAM,EAAEN,GAASpD,MAAM4D,cAAcD,EAAEP,GAASpD,OAC5B,QAAZoD,EACFM,EAAEN,GAASS,IAAMF,EAAEP,GAASS,IAE5BH,EAAEN,GAASQ,cAAcD,EAAEP,SAIjBrE,IAAf2E,EAAEN,GACG,OACiBrE,IAAf4E,EAAEP,IACH,EAGW,SAAZA,EACAO,EAAEP,GAASpD,MAAM4D,cAAcF,EAAEN,GAASpD,OAC5B,QAAZoD,EACFO,EAAEP,GAASS,IAAMH,EAAEN,GAASS,IAE5BF,EAAEP,GAASQ,cAAcF,EAAEN,OAMlCU,EAAkB9E,EAAe4B,SAASzB,KAAI,SAAAmE,GAElD,OADAA,EAAKpB,MAAQoB,EAAKpE,OAASkE,EAAUC,EAAeC,EAAKpB,MAClDoB,KAGTnB,EAAkB,eACbnD,EADY,CAEfC,cAAeuE,EACf5C,SAAUkD,QAkCV,kBAAC,EAAD,MACA,yBAAKlE,UAAU,aACZZ,EAAeC,cAAc8E,OAAS,EACrC,kBAAC,EAAD,MAEA,iCCrGKC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCFSC,MAJf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OAAO,yBAAKtE,UAAU,WAAWsE,I,MCYpBC,MAZf,WACE,OACE,yBAAKvE,UAAU,UACb,wBAAIA,UAAU,QAAd,6BACA,wBAAIA,UAAU,QAAd,0F,MCWSwE,MAXf,WACE,OACE,yBAAKxE,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.b89e7b8d.chunk.js","sourcesContent":["/**\n * React Context\n * Context provides a way to pass data through the component tree without\n * having to pass props down manually at every level.\n *\n * https://reactjs.org/docs/context.html#reactcreatecontext\n */\n\nimport React from 'react';\n\nconst DataAreaContext = React.createContext({});\n\nexport default DataAreaContext;\n","import React, { useContext } from 'react';\nimport '../styles/GridDataBody.css';\nimport GridDataContext from '../utils/GridDataContext';\n\nconst GridDataBody = () => {\n  const context = useContext(GridDataContext);\n\n  function dateFormat(date) {\n    const dateArr = date.split('-');\n    const year = dateArr[0];\n    const month = dateArr[1];\n    const dayArr = dateArr[2].split('T');\n    const day = dayArr[0];\n    const formattedDate = [month, day, year].join('-');\n    return formattedDate;\n  }\n\n  return (\n    <tbody>\n      {context.developerState.filteredUsers[0] !== undefined &&\n      context.developerState.filteredUsers[0].name !== undefined ? (\n        context.developerState.filteredUsers.map(\n          ({ login, name, picture, phone, email, dob }) => {\n            return (\n              <tr key={login.uuid}>\n                <td data-th='Image' className='align-middle'>\n                  <img\n                    src={picture.medium}\n                    alt={'profile image for ' + name.first + ' ' + name.last}\n                    className='img-responsive'\n                  />\n                </td>\n                <td data-th='Name' className='name-cell align-middle'>\n                  {name.first} {name.last}\n                </td>\n                <td data-th='Phone' className='align-middle'>\n                  {phone}\n                </td>\n                <td data-th='Email' className='align-middle'>\n                  <a href={'mailto:' + email} target='__blank'>\n                    {email}\n                  </a>\n                </td>\n                <td data-th='DOB' className='align-middle'>\n                  {dateFormat(dob.date)}\n                </td>\n              </tr>\n            );\n          }\n        )\n      ) : (\n        <></>\n      )}\n    </tbody>\n  );\n};\n\nexport default GridDataBody;\n","import React, { useContext } from 'react';\nimport DataBody from './GridDataBody';\nimport '../styles/GridDataTable.css';\nimport DataAreaContext from '../utils/GridDataContext';\n\nconst DataTable = () => {\n  const context = useContext(DataAreaContext);\n\n  return (\n    <div className='datatable mt-5'>\n      <table\n        id='table'\n        className='table table-striped table-hover table-condensed'\n      >\n        <thead>\n          <tr>\n            {context.developerState.headings.map(({ name, width }) => {\n              return (\n                <th\n                  className='col'\n                  key={name}\n                  style={{ width }}\n                  onClick={() => {\n                    // context.handleSort(name.toLowerCase());\n                    context.handleSort(name);\n                  }}\n                >\n                  {name}\n                  <span className='pointer'></span>\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n\n        <DataBody />\n      </table>\n    </div>\n  );\n};\n\nexport default DataTable;\n","import React, { useContext } from 'react';\nimport GridDataContext from '../utils/GridDataContext';\n\nconst SearchByName = () => {\n  const context = useContext(GridDataContext);\n\n  return (\n    <div className='searchbox'>\n      <div className='input-group'>\n        <div className='input-group-prepend'>\n          <span className='input-group-text' id=''>\n            Search\n          </span>\n        </div>\n        <input\n          className='form-control mr-sm-2'\n          type='search'\n          placeholder='name'\n          aria-label='Search'\n          onChange={e => context.handleSearchChange(e)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchByName;\n","import React from 'react';\nimport '../styles/Navigation.css';\nimport SearchByName from '../components/SearchByName';\n\nfunction Navigation() {\n  return (\n    <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n      <button\n        className='navbar-toggler'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarNav'\n        aria-controls='navbarNav'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon' />\n      </button>\n      <div className='collapse navbar-collapse row' id='navbarNav'>\n        <div className='search-area col-4'>\n          <SearchByName />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navigation;\n","/**\n * Search Public-APIs on Goole\n * Used https://randomuser.me/ with axios\n * https://randomuser.me/api/?results=20&nat=us\n */\n\nimport axios from 'axios';\n\nexport default {\n  // Gets users from randomuser.me\n  getUsers: function() {\n    return axios.get('https://randomuser.me/api/?results=20&nat=us');\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport GridDataTable from './GridDataTable';\nimport Navigation from './Navigation';\nimport RandomUserAPI from '../utils/RandomuserAPI';\nimport GridDataContext from '../utils/GridDataContext';\n\nconst GridData = () => {\n  const [developerState, setDeveloperState] = useState({\n    users: [],\n    order: 'descend',\n    filteredUsers: [],\n    headings: [\n      { name: 'Image', width: '10%', order: 'descend' },\n      { name: 'name', width: '10%', order: 'descend' },\n      { name: 'phone', width: '20%', order: 'descend' },\n      { name: 'email', width: '20%', order: 'descend' },\n      { name: 'dob', width: '10%', order: 'descend' }\n    ]\n  });\n\n  const handleSort = heading => {\n    let currentOrder = developerState.headings\n      .filter(elem => elem.name === heading)\n      .map(elem => elem.order)\n      .toString();\n\n    if (currentOrder === 'descend') {\n      currentOrder = 'ascend';\n    } else {\n      currentOrder = 'descend';\n    }\n\n    const compareFnc = (a, b) => {\n      if (currentOrder === 'ascend') {\n        // account for missing values\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        }\n        // numerically\n        else if (heading === 'name') {\n          return a[heading].first.localeCompare(b[heading].first);\n        } else if (heading === 'dob') {\n          return a[heading].age - b[heading].age;\n        } else {\n          return a[heading].localeCompare(b[heading]);\n        }\n      } else {\n        // account for missing values\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        }\n        // numerically\n        else if (heading === 'name') {\n          return b[heading].first.localeCompare(a[heading].first);\n        } else if (heading === 'dob') {\n          return b[heading].age - a[heading].age;\n        } else {\n          return b[heading].localeCompare(a[heading]);\n        }\n      }\n    };\n\n    const sortedUsers = developerState.filteredUsers.sort(compareFnc);\n    const updatedHeadings = developerState.headings.map(elem => {\n      elem.order = elem.name === heading ? currentOrder : elem.order;\n      return elem;\n    });\n\n    setDeveloperState({\n      ...developerState,\n      filteredUsers: sortedUsers,\n      headings: updatedHeadings\n    });\n  };\n\n  const handleSearchChange = event => {\n    const filter = event.target.value;\n    const filteredList = developerState.users.filter(item => {\n      let values =\n        item.name.first.toLowerCase() + ' ' + item.name.last.toLowerCase();\n      console.log(filter, values);\n      if (values.indexOf(filter.toLowerCase()) !== -1) {\n        return item;\n      }\n    });\n\n    setDeveloperState({ ...developerState, filteredUsers: filteredList });\n  };\n\n  // If you only want to run the function given to useEffect after the initial render, you can give it an empty array as second argument.\n  useEffect(() => {\n    RandomUserAPI.getUsers().then(results => {\n      console.log(results.data.results);\n      setDeveloperState({\n        ...developerState,\n        users: results.data.results,\n        filteredUsers: results.data.results\n      });\n    });\n  }, []);\n\n  return (\n    <GridDataContext.Provider\n      value={{ developerState, handleSearchChange, handleSort }}\n    >\n      <Navigation />\n      <div className='data-area'>\n        {developerState.filteredUsers.length > 0 ? (\n          <GridDataTable />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    </GridDataContext.Provider>\n  );\n};\n\nexport default GridData;\n","import React from 'react';\nimport GridData from './GridData';\n\n// import css\n\nfunction Landing() {\n  return (\n    <>\n      <GridData />\n    </>\n  );\n}\n\nexport default Landing;\n","import React from 'react';\n\nfunction Wrapper({ children }) {\n  return <div className='wrapper'>{children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport '../styles/Header.css';\n\nfunction Header() {\n  return (\n    <div className='header'>\n      <h1 className='h-h1'>React Empoloyee Directory</h1>\n      <h6 className='h6-1'>\n        Click on grid title to filter by heading or use the search box to find\n        your results.\n      </h6>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Main from './components/Landing';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}